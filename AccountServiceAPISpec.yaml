# Account Services API
#
#
# Description: This API includes the header API information, the Server information,
#              the user account paths, the user account components such as parameters,
#              responses, and schema's. This API also includes user accounts and their
#              properties.
#
# Purpose: This API allows the various website users to create accounts, login
#          into https://www.cusports.com and search/adjust various settings.
#          It is also used by the CUSports admin to manage account information.


# ---------General API Information---------
openapi: '3.0.0'
info:
  version: '1.0.0'
  title: 'Account Services API'
  description: An Account Service API for the TigerChow Software System

# ---------API Server Information---------
servers:
  - url: https://www.TigerChow.com/api

# ---------API Paths Information---------
paths:
  # Users can be customers, business users, customer service reps, admin, or other employees; personal information is also stored
  /accounts:

    # Get all user accounts
    get:
      description: Returns a list of user accounts and filter by specific parameters such as
                   PageLimit
                   PageOffset...
      parameters:
        - $ref: '#/components/parameters/PageLimit'
        - $ref: '#/components/parameters/PageOffset'
        - $ref: '#/components/parameters/Activity'

      # Responses to getting the list of all users
      responses:
        '200':
          description: Retrieved the list of all user accounts successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/account'
        '400':
          $ref: '#/components/responses/400Error'
        '500':
          $ref: '#/components/responses/500Error'

    # Creates a user account with user entered properties; assigns user with an id
    post:
      description: Allows you to add a new account or accounts to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account'
      # Responses to creating a particular users
      responses:
        '200':
          description: Successfully added a new user account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        '400':
          $ref: '#/components/responses/400Error'
        '409':
          description: 'Email was already used to create an account'
        '500':
          $ref: '#/components/responses/500Error'

  # Account User preferences
  /account/user-preferences/{id}:
    parameters:
      - name: id
        description: The unique identifier of a user
        in: path
        required: true
        schema:
          type: string

    get:
      description: Retrieve all user preferences in a list
      parameters:
        - $ref: '#/component/schemas/account'
      responses:
        '200':
          description: Successfully returned the list of user preferences for this account
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User preferences updated successfully.'
        '400':
          description: 'Please make sure the correct userID and name are included.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Bad Request.'
        '404':
          description: Account not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Account not found.'

    post:
      description: Create a user preference for the account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userPreferences'
      responses:
        '200':
          description: User preferences created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User preferences created successfully.'
        '201':
          description: User preferences created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User preferences created successfully.'
        '400':
          $ref: '#/components/responses/400Error'

    patch:
      description: Notify when a user's preferences are updated
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userPreferences'
              
      responses:
        '200':
          description: User preferences updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User preferences updated successfully.'
        '204':
          description: User preferences updated successfully. No Content.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User preferences updated successfully. No Content'
        '400':
          $ref: '#/components/responses/400Error'


  # Login path for every user account to login into the website
  /account/login:

    post:
      description: Login a user to the TigerChow Website
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginCredentials'

      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A message indicating the result of the operation
                    example: 'Login successful'

        '400':
          $ref: '#/components/responses/invalidLogin'

        '404':
          description: Account does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User account not found or is deactivated."

        '500':
          $ref: '#/components/responses/500Error'

  # User's id path that allows users to fetch or edit a particular user account
  /account/{id}:
    parameters:
      - name: id
        description: The unique identifier of a user
        in: path
        required: true
        schema:
          type: string

    # Retrieve the information for a user by id
    get:
      description: Retrieve a specific user by an id

      responses:
        '200':
          description: Sucessfully return the user corresponding to the provided `id`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        '400':
            $ref: '#/components/responses/400Error'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User account not found."
        '500':
            $ref: '#/components/responses/500Error'

    patch:
      description: Allows a user to deactivate their account by changing status to "unregistered."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginCredentials'
      
      responses:
        '200':
            description: Successfully deactivated the user account.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "User account successfully deactivated."
        '400':
            description: Invalid credentials or request body
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Invalid login credentials"
        '404':
            description: Account not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Account with the provided login credentials not found"
        '500':
            $ref: '#/components/responses/500Error'

    # Permanently deletes a user
    delete:
      description: Permanently deletes a user's account (Admin only)

      responses:
        '200':
          description: Successfully deleted user account.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User account successfully deleted."
        '400':
          description: 'Bad Syntax or Query.'
          content:
            application/json:
                schema:
                    type: object
                    properties:
                        message:
                            type: string
                            example: "Please enter a valid userID"
        '401':
          description: 'Unauthorized access to delete account.'
          content:
            application/json:
                schema:
                    type: object
                    properties:
                        message:
                            type: string
                            example: "Not authorized to delete the account"
        '404':
          description: 'Account not found.'
          content:
            application/json:
                schema:
                    type: object
                    properties:
                        message:
                            type: string
                            example: "Account with the provided userID not found"
        '500':
          $ref: '#/components/responses/500Error'

  # Password management endpoint for updating password
  /account/password/{id}:
    parameters:
      - name: id
        description: The unique identifier of a user
        in: path
        required: true
        schema:
          type: string

    post:
      description: Allows user to create a password for their account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/changePasswordRequest'
      
      responses:
        '200':
          description: Password set successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message for the password being set
                    example: 'Password set successfully.'

        '400':
          description: Bad request due to invalid input.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Explanation of the error
                    example: 'Password must be at least 8 characters long.'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User account not found."
        '500':
          $ref: '#/components/responses/500Error'

    put:
      description: Allows user to update/change their old password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/changePasswordRequest'

      responses:
        '200':
          description: Password reset successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message for the password reset
                    example: 'Password reset successfully.'

        '400':
          description: Bad request due to invalid input.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Explanation of the error
                    example: 'Password must be at least 8 characters long.'
        '500':
          $ref: '#/components/responses/500Error'


# ---------API Components Information---------
# Contains all reusable parameters, responses, and schemas for the Accounts API
components:

  # ---------Parameters---------
  parameters:

    # Helps set the limit of user accounts on a single page
    PageLimit:
      name: limit
      in: query
      description: Limits the number of items on a page
      schema:
        type: integer

    # Helps to select which page of user accounts to be displayed
    PageOffset:
      name: offset
      in: query
      description: Specifies the page number of the user accounts to be displayed
      schema:
        type: integer

    # Helps to select user accounts of a specific activity status
    Activity:
      name: activity
      in: query
      description: Specifies the activity status of the user accounts to be displayed
      schema:
        type: boolean

  # ---------API Responses Information---------
  responses:

    # A schema for general 400 error code information
    400Error:
      description: Invalid Client Request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                description: A human readable error message
                type: string

    # A schema for general 500 error code information
    500Error:
      description: Unexpected Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                description: A human readable error message
                type: string
                    
    invalidLogin:
      description: Invalid login credentials
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: A message indicating the result of the operation
                example: 'Invalid email'

  # ---------API Schemas Information---------
  schemas:

    # Login Credential schema to be re-used throughout the API
    loginCredentials:
      description: The requirements to login
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    # User Preferences schema to be re-used throughout the API
    userPreferences:
      description: represents the preferences that a user may have
      type: object
      required:
        - language
      properties:
        language:
          type: string
        emailList:
          type: boolean

    # User account schema to be re-used throughout the API
    account:
      description: A single user account for the TigerChow application
      type: object
      required:
        - id
        - name
      properties:
        # Unique ID for a given user
        id:
          type: string
        name:
          type: string
        location:
          type: string
        userType:
          type: string
          enum: 
            - customer
            - business_user
            - admin
            - customer_service_rep

        # User Preferences of the user
        preferences:
          $ref: "#/components/schemas/userPreferences"

    changePasswordRequest:
      description: The requirements to update password
      type: object
      required:
        - email
        - password
        - new_password
      properties:
        email:
          type: string
        password:
          type: string
        new_password:
          type: string

  # ---------API SecuritySchemes Information NOT NEEDED FOR 3720---------
  #securitySchemes:
  #  ApiKey:
  #    type: apiKey
  #    in: header
  #    name: X-Api-Key

# ---------API Security Information  NOT NEEDED FOR 3720---------
#security:
#  - ApiKey: []
